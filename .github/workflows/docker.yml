name: Test in Linux Distributions

on:
  push:
    tags:
      - "v*"
    # branches:
    #   - master
  pull_request:
    branches:
      - master
  schedule:
    - cron: "0 2 * * *"

jobs:
  on-success:
    needs: test
    runs-on: ubuntu-latest
    container: whatwewant/zmicro:v1
    if: ${{ always() && needs.test.result == 'success' }}
    steps:
      - name: Notification Feishu
        uses: whatwewant/action-robot-feishu@v0.0.13
        with:
          url: ${{ secrets.WORKFLOW_FEISHU_BOT_WEBHOOK_URL }}
          title: "✅ 测试 Linux 发行版：${{ github.repository }}"
          text: |
            分支: ${{ github.ref }}
            提交信息: ${{ github.event.head_commit.message }}
            提交人: ${{ github.actor }}
            状态: 构建成功（https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}）

  on-failure:
    needs: test
    runs-on: ubuntu-latest
    container: whatwewant/zmicro:v1
    if: ${{ always() && needs.test.result == 'failure' }}
    steps:
      - name: Notification Feishu
        uses: whatwewant/action-robot-feishu@v0.0.13
        with:
          url: ${{ secrets.WORKFLOW_FEISHU_BOT_WEBHOOK_URL }}
          title: "❌ 测试 Linux 发行版：${{ github.repository }}"
          text: |
            分支: ${{ github.ref }}
            提交信息: ${{ github.event.head_commit.message }}
            提交人: ${{ github.actor }}
            状态: 构建失败（https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}）

  test:
    runs-on: ubuntu-latest
    container: whatwewant/zmicro:v1

    steps:
      - name: Update Zmicro
        run: zmicro update -a

      - uses: actions/checkout@v2
        with:
          fetch-depth: "0"

      - name: Install Docker CLI
        run: zmicro package install docker

      - name: Build Image Checkout
        run: |
          VERSION=$(echo ${GITHUB_REF} | sed -e "s%refs/tags/%%g")
          NAME=whatwewant/pipeline_checkout
          PLATFORM="linux/amd64"
          #
          TAGS=$(zmicro fn tag::docker $NAME $VERSION)
          TAGS_ARRAY=$(zmicro fn string::split , $TAGS)

          create_tags_options() {
            for one in ${@}; do
              TAGS_OPTIONS="$TAGS_OPTIONS -t $one"
            done
          }

          TAGS_OPTIONS=""
          create_tags_options $(echo $TAGS_ARRAY)
          echo "TAGS_OPTIONS: $TAGS_OPTIONS"
          docker build \
            --cache-from type=registry,ref=${NAME}:buildcache \
            --cache-to type=registry,ref=${NAME}:buildcache,mode=max \
            --platform ${PLATFORM} \
            ${TAGS_OPTIONS} \
            -f config/docker/Dockerfile.ubuntu \
            .

          push_tag() {
            for one in ${@}; do
              docker push ${one}
            done
          }
          push_tag $(echo $TAGS_ARRAY)
