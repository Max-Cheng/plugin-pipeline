#!/bin/bash

pipeline::service_prepare() {
  export PLUGIN_PIPELINE_SERVICE_INSTANCE_NAME=${PLUGIN_PIPELINE_SERVICE_INSTANCE_NAME:-$PIPELINE_SERVICE_INSTANCE_NAME}
  if [ -z "$PLUGIN_PIPELINE_SERVICE_INSTANCE_NAME" ]; then
    log::error "service name(PLUGIN_PIPELINE_SERVICE_INSTANCE_NAME) is required"
    exit 1
  fi

  # Network
  docker network inspect $PLUGIN_PIPELINE_NETWORK >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    docker network create $PLUGIN_PIPELINE_NETWORK >>/dev/null 2>&1
  fi

  export PLUGIN_PIPELINE_SERVICE_CONTEXT=${PLUGIN_PIPELINE_SERVICE_CONTEXT_BASE}/$PLUGIN_PIPELINE_SERVICE_INSTANCE_NAME
  export PLUGIN_PIPELINE_SERVICE_DIR=$PLUGIN_PIPELINE_SERVICE_CONTEXT
  export PLUGIN_PIPELINE_SERVICE_ENV_FILE=$PLUGIN_PIPELINE_SERVICE_CONTEXT/.env
  if [ ! -f "$PLUGIN_PIPELINE_SERVICE_ENV_FILE" ]; then
    log::error ".env($PLUGIN_PIPELINE_SERVICE_ENV_FILE) not found"
    exit 1
  fi

  # load mod
  config::load_file $PLUGIN_PIPELINE_MOD
  export PLUGIN_NAME=$PLUGIN_NAME
  export PLUGIN_VERSION=$PLUGIN_VERSION
  export PLUGIN_DESCRIPTION=$PLUGIN_DESCRIPTION

  # load PLUGIN_PIPELINE_SERVICE_ENV_FILE
  config::load_file $PLUGIN_PIPELINE_SERVICE_ENV_FILE

  ###
  if [ -z "$PLUGIN_PIPELINE_SERVICE_IMAGE_NAME" ]; then
    log::error "PLUGIN_PIPELINE_SERVICE_IMAGE_NAME is required"
    exit 1
  fi

  if [ -z "$PLUGIN_PIPELINE_SERVICE_IMAGE_VERSION" ]; then
    log::error "PLUGIN_PIPELINE_SERVICE_IMAGE_VERSION is required"
    exit 1
  fi

  if [ -z "$PLUGIN_PIPELINE_SERVICE_INSTANCE_NAME" ]; then
    log::error "PLUGIN_PIPELINE_SERVICE_INSTANCE_NAME is required"
    exit 1
  fi

  if [ -z "$PLUGIN_PIPELINE_SERVICE_IMAGE_AUTHOR" ]; then
    log::error "PLUGIN_PIPELINE_SERVICE_IMAGE_AUTHOR is required"
    exit 1
  fi

  if [ -z "$PLUGIN_PIPELINE_SERVICE_INSTANCE_NAME" ]; then
    log::error "PLUGIN_PIPELINE_SERVICE_INSTANCE_NAME is required"
    exit 1
  fi

  if [ -z "$PLUGIN_PIPELINE_SERVICE_INSTANCE_UUID" ]; then
    log::error "PLUGIN_PIPELINE_SERVICE_INSTANCE_UUID is required"
    exit 1
  fi
}

export -f pipeline::service_prepare
