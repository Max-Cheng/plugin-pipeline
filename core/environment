#!/bin/bash

pipeline::env() {
  # BUILD CONTEXT FILES

  if [ -z "$PIPELINE_BUILD_CONTEXT" ]; then
    log::error "[pipeline::env] PIPELINE_BUILD_CONTEXT is required"
    exit 1
  fi

  if [ ! -d "$PIPELINE_BUILD_CONTEXT" ]; then
    log::error "[pipeline::env] PIPELINE_BUILD_CONTEXT(${PIPELINE_BUILD_CONTEXT}) dir not found"
    exit 1
  fi

  # build env
  export PIPELINE_BUILD_CONTEXT_ENV="$PLUGIN_PIPELINE_BUILD_CONTEXT/env"

  # build log
  export PIPELINE_BUILD_CONTEXT_LOG="$PLUGIN_PIPELINE_BUILD_CONTEXT/log"

  # build status: pending | running | succeed | failed
  export PIPELINE_BUILD_CONTEXT_STATUS="$PLUGIN_PIPELINE_BUILD_CONTEXT/status"

  # build time
  export PIPELINE_BUILD_CONTEXT_RUNNING_AT="$PLUGIN_PIPELINE_BUILD_CONTEXT/running_at"
  export PIPELINE_BUILD_CONTEXT_SUCCEED_AT="$PLUGIN_PIPELINE_BUILD_CONTEXT/ended_at"
  export PIPELINE_BUILD_CONTEXT_FAILED_AT="$PLUGIN_PIPELINE_BUILD_CONTEXT/failed_at"

  # generate build context files
  pipeline::env_generate_files

  # save build context env
  pipeline::env_save

  # log
  # log::info "PIPELINE_BUILD_ID: $PLUGIN_PIPELINE_BUILD_ID"
  # log::info "PIPELINE_BUILD_CONTEXT: $PLUGIN_PIPELINE_BUILD_CONTEXT"
  # log::info "PIPELINE_BUILD_CONTEXT_ENV: $PIPELINE_BUILD_CONTEXT_ENV"
  # log::info "PIPELINE_BUILD_CONTEXT_LOG: $PIPELINE_BUILD_CONTEXT_LOG"
  # log::info "PIPELINE_BUILD_CONTEXT_STATUS: $PIPELINE_BUILD_CONTEXT_STATUS"
  # log::info "PIPELINE_BUILD_CONTEXT_RUNNING_AT: $PIPELINE_BUILD_CONTEXT_RUNNING_AT"
  # log::info "PIPELINE_BUILD_CONTEXT_SUCCEED_AT: $PIPELINE_BUILD_CONTEXT_SUCCEED_AT"
  # log::info "PIPELINE_BUILD_CONTEXT_FAILED_AT: $PIPELINE_BUILD_CONTEXT_FAILED_AT"
}

pipeline::env_save() {
  # echo "printenv > $PIPELINE_BUILD_CONTEXT_ENV"
  # @TODO not works
  # printenv > $PIPELINE_BUILD_CONTEXT_ENV 2>&1 > /dev/null
  # export > $PIPELINE_BUILD_CONTEXT_ENV 2>&1 > /dev/null

  cat <<EOF >$PIPELINE_BUILD_CONTEXT_ENV
# REPO
PIPELINE_GIT_REGISTRY=$PIPELINE_GIT_REGISTRY
PIPELINE_GIT_REPOSITORY=$PIPELINE_GIT_REPOSITORY
PIPELINE_GIT_BRANCH=$PIPELINE_GIT_BRANCH
PIPELINE_GIT_COMMIT=$PIPELINE_GIT_COMMIT
PIPELINE_GIT_COMMIT_MESSAGE=$PIPELINE_GIT_COMMIT_MESSAGE
PIPELINE_GIT_ACTOR=$PIPELINE_GIT_ACTOR
PIPELINE_GIT_TAG=$PIPELINE_GIT_TAG
PIPELINE_GIT_REF=$PIPELINE_GIT_REF

# DOCKER
PIPELINE_DOCKER_REGISTRY=$PIPELINE_DOCKER_REGISTRY
PIPELINE_IMAGE_NAME=$PIPELINE_IMAGE_NAME
PIPELINE_IMAGE_TAGS=$PIPELINE_IMAGE_TAGS

# RUNTIME
PIPELINE_RUNNE_HOST_NAME=$(os::hostname)
PIPELINE_RUNNER_OS=$(os::distribution)
PIPELINE_RUNNER_ARCH=$(os::arch)

# BUILD CONTEXT
PIPELINE_BUILD_CONTEXT=${PLUGIN_PIPELINE_BUILD_CONTEXT}
PIPELINE_BUILD_CONTEXT_ENV=$PIPELINE_BUILD_CONTEXT_ENV
PIPELINE_BUILD_CONTEXT_LOG=$PIPELINE_BUILD_CONTEXT_LOG
PIPELINE_BUILD_CONTEXT_STATUS=$PIPELINE_BUILD_CONTEXT_STATUS
PIPELINE_BUILD_CONTEXT_RUNNING_AT=$PIPELINE_BUILD_CONTEXT_RUNNING_AT
PIPELINE_BUILD_CONTEXT_SUCCEED_AT=$PIPELINE_BUILD_CONTEXT_SUCCEED_AT
PIPELINE_BUILD_CONTEXT_FAILED_AT=$PIPELINE_BUILD_CONTEXT_FAILED_AT
EOF
}

pipeline::env_generate_files() {
  # generate build files
  log::debug "[pipeline::env] generating ${PIPELINE_BUILD_CONTEXT_ENV} ..."
  if [ ! -f "$PIPELINE_BUILD_CONTEXT_ENV" ]; then
    echo "pending" >$PIPELINE_BUILD_CONTEXT_ENV
  fi

  log::debug "[pipeline::env] generating ${PIPELINE_BUILD_CONTEXT_STATUS} ..."
  if [ ! -f "$PIPELINE_BUILD_CONTEXT_STATUS" ]; then
    echo "pending" >$PIPELINE_BUILD_CONTEXT_STATUS
  fi

  log::debug "[pipeline::env] generating ${PIPELINE_BUILD_CONTEXT_RUNNING_AT} ..."
  if [ ! -f "$PIPELINE_BUILD_CONTEXT_RUNNING_AT" ]; then
    touch $PIPELINE_BUILD_CONTEXT_RUNNING_AT
  fi

  log::debug "[pipeline::env] generating ${PIPELINE_BUILD_CONTEXT_SUCCEED_AT} ..."
  if [ ! -f "$PIPELINE_BUILD_CONTEXT_SUCCEED_AT" ]; then
    touch $PIPELINE_BUILD_CONTEXT_SUCCEED_AT
  fi

  log::debug "[pipeline::env] generating ${PIPELINE_BUILD_CONTEXT_FAILED_AT} ..."
  if [ ! -f "$PIPELINE_BUILD_CONTEXT_FAILED_AT" ]; then
    touch $PIPELINE_BUILD_CONTEXT_FAILED_AT
  fi
  # generate build files end
}

export -f pipeline::env
export -f pipeline::env_save

export -f pipeline::env_generate_files
